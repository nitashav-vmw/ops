apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: spring-data-example
  annotations:
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    ootb.apps.tanzu.vmware.com/apidescriptor-ref: "true"
  labels:
    app.kubernetes.io/part-of: spring-data-example
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: web
    kapp.k14s.io/app: "1677181848325547856"
    kapp.k14s.io/association: v1.d87c64f7fdb523a92bfd8c6be140a9f6
    app.kubernetes.io/component: run
    carto.run/workload-name: spring-data-example
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/minScale: "1"
        boot.spring.io/version: 3.0.2
        conventions.carto.run/applied-conventions: |-
          add-label-convention/add-bu-label
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-graceful-shutdown
          spring-boot-convention/spring-boot-web
          spring-boot-convention/spring-boot-actuator
          spring-boot-convention/spring-boot-actuator-probes
          spring-boot-convention/app-live-view-appflavour-check
          spring-boot-convention/app-live-view-connector-boot
          spring-boot-convention/app-live-view-appflavours-boot
          appliveview-sample/app-live-view-appflavour-check
        developer.conventions/target-containers: workload
        kapp.k14s.io/identity: v1;gbs-qa/carto.run/Workload/spring-data-example;carto.run/v1alpha1
        kapp.k14s.io/original: '{"apiVersion":"carto.run/v1alpha1","kind":"Workload","metadata":{"labels":{"app.kubernetes.io/part-of":"spring-data-example","apps.tanzu.vmware.com/has-tests":"true","apps.tanzu.vmware.com/workload-type":"web","kapp.k14s.io/app":"1677181848325547856","kapp.k14s.io/association":"v1.d87c64f7fdb523a92bfd8c6be140a9f6"},"name":"spring-data-example","namespace":"gbs-qa"},"spec":{"build":{"env":[{"name":"BP_JVM_VERSION","value":"17"}]},"params":[{"name":"annotations","value":{"autoscaling.knative.dev/minScale":"1"}},{"name":"gitops_repository","value":"ssh://git@github.com/nitashav-vmw/ops.git"},{"name":"gitops_branch","value":"main"},{"name":"gitops_ssh_secret","value":"git-ssh"},{"name":"gitops_server_address","value":"ssh://git@github.com"},{"name":"gitops_repository_owner","value":"nitashav-vmw"},{"name":"gitops_repository_name","value":"ops"}],"serviceClaims":[{"name":"db","ref":{"apiVersion":"services.apps.tanzu.vmware.com/v1alpha1","kind":"ClassClaim","name":"mysql"}}],"source":{"git":{"ref":{"branch":"main"},"url":"https://github.com/nitashav-vmw/spring-data-example"}}}}'
        kapp.k14s.io/original-diff-md5: c6e94dc94aed3401b5d0f26ed6c0bff3
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: spring-data-example
        apps.tanzu.vmware.com/auto-configure-actuators: "false"
        apps.tanzu.vmware.com/has-tests: "true"
        apps.tanzu.vmware.com/workload-type: web
        business-unit: gbs
        carto.run/workload-name: spring-data-example
        conventions.carto.run/framework: spring-boot
        kapp.k14s.io/app: "1677181848325547856"
        kapp.k14s.io/association: v1.d87c64f7fdb523a92bfd8c6be140a9f6
        tanzu.app.live.view: "true"
        tanzu.app.live.view.application.actuator.path: actuator
        tanzu.app.live.view.application.actuator.port: "8080"
        tanzu.app.live.view.application.flavours: spring-boot
        tanzu.app.live.view.application.name: spring-data-example
    spec:
      containers:
      - env:
        - name: JAVA_TOOL_OPTIONS
          value: -Dmanagement.endpoint.health.probes.add-additional-paths="true" -Dmanagement.health.probes.enabled="true" -Dserver.port="8080" -Dserver.shutdown.grace-period="24s"
        image: nitashav.azurecr.io/build-service/spring-data-example-gbs-qa@sha256:6beab2be3bd217439a0f64632e1758438f55bffbe7b5e48172c61164c4514f54
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
        resources: {}
        securityContext:
          runAsUser: 1000
      serviceAccountName: default

